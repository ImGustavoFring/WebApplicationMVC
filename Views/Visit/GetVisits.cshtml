@model IEnumerable<(string Month, int TotalCount)>

@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    var months = Model.Select(v => v.Month).ToArray();
    var counts = Model.Select(v => v.TotalCount).ToArray();

    // Прогнозирование на основе скользящего среднего
    int windowSize = 3; // Размер окна для скользящего среднего
    var smoothedCounts = new List<int>();

    // Вычисляем скользящее среднее для исторических данных
    for (int i = 0; i < counts.Length; i++)
    {
        var start = Math.Max(0, i - windowSize + 1);
        var window = counts.Skip(start).Take(windowSize);
        var average = (int)window.Average();
        smoothedCounts.Add(average);
    }

    // Прогнозируем будущие месяцы (например, 3 месяца)
    var futureMonths = new List<string>();
    var futureCounts = new List<int>();

    if (months.Any())
    {
        var lastDate = DateTime.ParseExact(months.Last(), "yyyy-MM", null);
        for (int i = 1; i <= 2; i++) // Прогнозируем 2 месяца вперед
        {
            var futureMonth = lastDate.AddMonths(i);
            futureMonths.Add(futureMonth.ToString("yyyy-MM"));
            futureCounts.Add(smoothedCounts.Last());
        }
    }
}

<h2>Статистика посещений (по месяцам)</h2>

@if (!months.Any())
{
    <p>Данные для отображения графика отсутствуют.</p>
}
else
{
    <canvas id="visitChart" width="800" height="400"></canvas>
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const ctx = document.getElementById('visitChart').getContext('2d');

    const labels = @Html.Raw(Json.Serialize(months.Concat(futureMonths)));
    const counts = @Html.Raw(Json.Serialize(counts));
    const smoothedCounts = @Html.Raw(Json.Serialize(smoothedCounts));
    const futureCounts = Array(counts.length).fill(null).concat(@Html.Raw(Json.Serialize(futureCounts)));

    console.log("Labels:", labels);
    console.log("Counts:", counts);
    console.log("Smoothed Counts:", smoothedCounts);
    console.log("Future Counts:", futureCounts);

    const visitChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [
                {
                    label: 'Посещения за месяц',
                    data: counts,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderWidth: 1
                },
                {
                    label: 'Скользящее среднее (исторические данные)',
                    data: smoothedCounts,
                    borderColor: 'rgba(54, 162, 235, 1)',
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderWidth: 1,
                    borderDash: [5, 5]
                },
                {
                    label: 'Прогноз (будущие месяцы)',
                    data: futureCounts,
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderWidth: 1,
                    borderDash: [5, 5],
                    fill: false
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return `Количество: ${context.raw}`;
                        }
                    }
                },
                legend: {
                    display: true
                },
            },
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Месяц'
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Количество посещений'
                    },
                    beginAtZero: true
                }
            }
        }
    });
</script>
